var BG, box, clean, draw, friction, grid, gridFactor, gridGap, gridIndex, i, index, j, label, labelProps, len, monitor, monitorMargin, name, newKnob, oval, rect, ref, ref1, slider, sliderBoxHeight, sliderBoxMargin, sliderBoxPadding, sliderLabelHeight, sliderPanel, sliderPanelPadding, tension, value, velocity;

document.body.style.cursor = "auto";

Framer.Defaults.deviceType = "fullScreen";

BG = new Layer({
  size: Screen.size,
  backgroundColor: "hsl(0, 0%, 10%)"
});

tension = 500;

friction = 25;

velocity = 0;

monitorMargin = 10;

monitor = new Layer({
  x: monitorMargin,
  y: monitorMargin,
  size: Screen.width - monitorMargin * 2,
  backgroundColor: "hsl(0, 0%, 5%)",
  borderRadius: 8,
  borderWidth: 3,
  borderColor: "hsla(0, 0%, 100%, 0.05)",
  clip: true,
  style: {
    boxShadow: "0 2px 2px hsla(1, 100%, 100%, 0.03)," + "0 -2px 2px hsla(1, 100%, 100%, 0.03)," + "inset 0 2px 3px hsla(1, 100%, 0%, 0.2)," + "inset 0 0px 5px hsla(1, 100%, 0%, 0.5)"
  }
});

gridFactor = 20;

gridGap = monitor.width / gridFactor;

grid = new Layer({
  parent: monitor,
  clip: true,
  size: monitor.size,
  backgroundColor: "none"
});

for (gridIndex = i = 0, ref = gridFactor - 1; 0 <= ref ? i < ref : i > ref; gridIndex = 0 <= ref ? ++i : --i) {
  grid.addChild(new Layer({
    width: grid.width,
    height: 1,
    y: gridGap * gridIndex + gridGap - monitor.borderWidth,
    backgroundColor: "white",
    opacity: gridIndex === gridFactor / 2 - 1 ? 0.1 : 0.03
  }));
  grid.addChild(new Layer({
    width: 1,
    height: grid.height,
    x: gridGap * gridIndex + gridGap - monitor.borderWidth,
    backgroundColor: "white",
    opacity: 0.03
  }));
}

oval = new Layer({
  parent: monitor,
  size: monitor.size,
  scale: 0.25,
  x: Align.center,
  y: Align.center,
  borderRadius: "50%",
  backgroundColor: "rgba(0,104,22,0.14)"
});

oval.states.add({
  state: {
    scale: 0.5
  }
});

rect = new Layer({
  parent: monitor,
  size: monitor.height / 25,
  borderRadius: "25%",
  backgroundColor: "rgba(239,155,40,1)",
  x: Align.right(-5),
  y: Align.bottom(-5)
});

sliderPanel = new Layer({
  height: Screen.height - monitor.maxY - monitorMargin * 2,
  width: monitor.width,
  x: monitorMargin,
  y: monitor.maxY + monitorMargin,
  borderRadius: monitor.borderRadius,
  backgroundColor: "hsla(0, 0%, 0%, 0.3)",
  style: {
    boxShadow: "0 1px 2px hsla(1, 100%, 100%, 0.05)," + "inset 0 2px 3px hsla(1, 100%, 0%, 0.2)"
  }
});

sliderPanelPadding = 20;

sliderLabelHeight = 20;

sliderBoxMargin = 2;

sliderBoxPadding = 20;

sliderBoxHeight = (sliderPanel.height - sliderBoxMargin * 4) / 3;

ref1 = ["Tension", "Friction", "Velocity"];
for (index = j = 0, len = ref1.length; j < len; index = ++j) {
  name = ref1[index];
  box = new Layer({
    name: name + "SliderBox",
    parent: sliderPanel,
    x: sliderBoxMargin,
    y: sliderBoxMargin + (sliderBoxMargin + sliderBoxHeight) * index,
    width: sliderPanel.width - sliderBoxMargin * 2,
    height: sliderBoxHeight,
    borderRadius: sliderPanel.borderRadius - sliderBoxMargin,
    backgroundColor: "hsl(0, 0%, 13%)",
    style: {
      boxShadow: "inset 0 1px 2px hsla(1, 100%, 100%, 0.05)," + "0 1px 2px hsla(1, 100%, 0%, 0.05)"
    }
  });
  labelProps = {
    parent: box,
    html: name,
    color: "hsla(0, 0%, 100%, 0.3)",
    backgroundColor: "transparent",
    y: sliderBoxPadding,
    width: 100,
    height: sliderLabelHeight,
    style: {
      fontSize: "16px",
      lineHeight: sliderLabelHeight + "px",
      textShadow: "0 1px 2px hsla(1, 100%, 0%, 0.5)"
    }
  };
  label = new Layer;
  label.props = labelProps;
  label.name = name + "Label";
  label.x = sliderBoxPadding;
  value = new Layer;
  value.props = labelProps;
  value.name = name + "Value";
  value.x = Align.right(-sliderBoxPadding);
  value.style.textAlign = "right";
  slider = new SliderComponent({
    name: name,
    parent: box,
    x: sliderBoxPadding,
    y: Align.bottom(-sliderBoxPadding),
    width: box.width - sliderBoxPadding * 2,
    height: 10,
    backgroundColor: new Color(monitor.backgroundColor).lighten(5),
    style: {
      boxShadow: "0 1px 0px hsla(1, 100%, 100%, 0.05)," + "inset 0 2px 5px hsla(1, 100%, 0%, 0.2)"
    }
  });
  slider.fill.style = {
    backgroundColor: "#28affa",
    boxShadow: "inset 0 3px 3px hsla(1, 100%, 100%, 0.3)"
  };
  slider.knob.draggable.momentum = false;
  newKnob = slider.knob.copy();
  slider.knob.props = {
    height: 50,
    backgroundColor: "transparent",
    style: {
      boxShadow: "none"
    }
  };
  slider.knob.addChild(newKnob);
  newKnob.size = 30;
  newKnob.width = 20;
  newKnob.center();
  slider.min = name === "Velocity" ? 0 : 1;
  slider.max = name === "Tension" ? 1000 : 100;
  value.html = slider.value = (function() {
    switch (name) {
      case "Tension":
        return 500;
      case "Friction":
        return 25;
      case "Velocity":
        return 0;
    }
  })();
  slider.on("change:value", function(event, layer) {
    var roundedValue, valueLabel, variable;
    roundedValue = Utils.round(this.value);
    valueLabel = layer.parent.subLayersByName(layer.name + "Value")[0];
    valueLabel.html = roundedValue;
    variable = layer.name.toLowerCase();
    return eval(variable + " = " + roundedValue);
  });
  slider.on(Events.TouchEnd, function(event, layer) {
    clean();
    return draw();
  });
}

draw = function() {
  var brush, canvas, curveOptions, drawX, drawY;
  curveOptions = {
    tension: tension,
    friction: friction,
    velocity: velocity
  };
  canvas = new Layer({
    name: "canvas",
    parent: monitor,
    backgroundColor: "transparent",
    size: monitor.size
  });
  brush = new Layer({
    parent: canvas,
    size: rect.size,
    borderRadius: "50%",
    backgroundColor: "yellow",
    y: Align.bottom,
    scale: 0.75
  });
  oval.states.animationOptions = {
    curve: "spring-rk4",
    curveOptions: curveOptions
  };
  oval.states.next();
  rect.y = Align.bottom;
  rect.animate({
    curve: "spring-rk4",
    curveOptions: curveOptions,
    properties: {
      y: Align.center
    }
  });
  drawY = brush.animate({
    curve: "spring-rk4",
    curveOptions: curveOptions,
    properties: {
      y: Align.center(-monitor.borderWidth),
      backgroundColor: "red"
    }
  });
  drawX = brush.animate({
    curve: "linear",
    properties: {
      midX: rect.midX
    }
  });
  drawX.onAnimationEnd(function() {
    return drawY.stop();
  });
  return brush.on("change:y", function() {
    var clone;
    if (brush.x <= canvas.width) {
      clone = this.copy();
      clone.animate({
        time: 0.5,
        properties: {
          scale: 0.2
        }
      });
      return canvas.addChild(clone);
    }
  });
};

clean = function() {
  var canvas;
  canvas = monitor.subLayersByName("canvas")[0];
  return canvas.destroy();
};

draw();

monitor.onClick(function() {
  if (!rect.isAnimating) {
    clean();
    return draw();
  }
});

//# sourceMappingURL=data:application/json;base64,
